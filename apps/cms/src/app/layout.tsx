/* Unified root layout using Payload's RootLayout to avoid nested html/body */
import config from "@payload-config";
import "@payloadcms/next/css";
import type { ServerFunctionClient } from "payload";
import { handleServerFunctions, RootLayout } from "@payloadcms/next/layouts";
import React from "react";

// importMap will be auto-generated by Payload
import "./(payload)/custom.scss";
import "./(payload)/engine.css";
import ClientBootstrap from "@/components/ClientBootstrap";

export const metadata = {
  title: "ScrapeSavee",
  description: "Admin & engine UI",
};

type Args = { children: React.ReactNode };

export default async function AppRootLayout({ children }: Args) {
  // Build importMap inline to avoid module-type conflicts with importMap.js
  const [
    RunStateCell,
    BlockPreviewCell,
    BlockUsersCell,
    MultiOriginCell,
    SaveeUserAvatarCell,
    EngineUI,
    EngineSandbox,
  ] = await Promise.all([
    import("@/components/RunStateCell").then((m) => m.default),
    import("@/components/BlockPreviewCell").then((m) => m.default),
    import("@/components/BlockUsersCell").then((m) => m.default),
    import("@/components/MultiOriginCell").then((m) => m.default),
    import("@/components/SaveeUserAvatarCell").then((m) => m.default),
    import("@/components/EngineUI").then((m) => m.default),
    import("@/components/EngineSandbox").then((m) => m.default),
  ]);

  const resolvedImportMap: Record<string, any> = {
    "@/components/RunStateCell#default": RunStateCell,
    "@/components/BlockPreviewCell#default": BlockPreviewCell,
    "@/components/BlockUsersCell#default": BlockUsersCell,
    "@/components/MultiOriginCell#default": MultiOriginCell,
    "@/components/SaveeUserAvatarCell#default": SaveeUserAvatarCell,
    "@/components/EngineUI#default": EngineUI,
    "@/components/EngineSandbox#default": EngineSandbox,
  };

  const serverFunction: ServerFunctionClient = async function (args) {
    "use server";
    return handleServerFunctions({
      ...args,
      config,
      importMap: resolvedImportMap,
    });
  };

  return (
    <RootLayout
      config={config}
      importMap={resolvedImportMap}
      serverFunction={serverFunction}
    >
      <ClientBootstrap />
      {children}
    </RootLayout>
  );
}

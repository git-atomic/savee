name: Engine Monitor

on:
  schedule:
    - cron: "*/2 * * * *" # every 2 minutes
  workflow_dispatch:
  repository_dispatch:
    types: [run_monitor]
  push:
    branches: [main]
    paths:
      - .github/workflows/monitor.yml
      - apps/cms/src/app/(payload)/api/engine/**

jobs:
  monitor:
    runs-on: ubuntu-22.04
    timeout-minutes: 45
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: 'pip'
          cache-dependency-path: apps/worker/requirements.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('apps/worker/requirements.txt') }}-v1
          restore-keys: |
            ${{ runner.os }}-playwright-

      - name: Install worker deps
        run: |
          python -m pip install --upgrade pip
          pip install -r apps/worker/requirements.txt

      - name: Install Playwright (with system deps)
        run: |
          python -m playwright install --with-deps chromium

      - name: Prepare cookies file (optional)
        env:
          COOKIES_JSON: ${{ secrets.COOKIES_JSON }}
        run: |
          if [ -n "$COOKIES_JSON" ]; then
            echo "Writing cookies from COOKIES_JSON"
            printf "%s" "$COOKIES_JSON" > apps/worker/savee_cookies.json
            echo "Best-effort validating cookies JSON (non-fatal)"
            python -c "import json,sys; p='apps/worker/savee_cookies.json'; raw=open(p,'r',encoding='utf-8').read();\
try:\n json.loads(raw)\n\
except Exception:\n\
    fixed=raw.replace(\"'\", '\"\');\
    \n    import json as _j;\
    try:\n        _j.loads(fixed); open(p,'w',encoding='utf-8').write(fixed)\n    except Exception: pass" || true
          else
            echo "No COOKIES_JSON secret set; relying on COOKIES_PATH if provided."
          fi

      - name: Call /api/engine/monitor (external-runner mode)
        env:
          CMS_URL: ${{ secrets.CMS_URL }}
          MONITOR_URL: ${{ secrets.MONITOR_URL }}
          ENGINE_MONITOR_TOKEN: ${{ secrets.ENGINE_MONITOR_TOKEN }}
          BACKFILL: ${{ github.event.inputs.backfill }}
          SOURCE_ID: ${{ github.event.client_payload.sourceId }}
          SEED_URL: ${{ secrets.SEED_URL }}
        run: |
          # Normalize provided URLs to avoid trailing /admin or / paths
          norm() { echo "$1" | sed -E 's#/+$##' | sed -E 's#/admin$##'; }
          CMS_BASE=$(norm "$CMS_URL")
          MON_BASE=$(norm "$MONITOR_URL")

          # Derive monitor URL
          URL=""
          if [ -n "$MON_BASE" ]; then
            case "$MON_BASE" in
              */api/engine/monitor*) URL="$MON_BASE" ;;
              *) URL="${MON_BASE%/}/api/engine/monitor" ;;
            esac
          elif [ -n "$CMS_BASE" ]; then
            URL="${CMS_BASE%/}/api/engine/monitor"
          fi

          if [ -z "$URL" ]; then echo "Provide MONITOR_URL or CMS_URL secret"; exit 1; fi
          # Seed a source if requested and none exist yet
          if [ -n "$SEED_URL" ] && [ -n "$CMS_URL" ]; then
            echo "Ensuring at least one source via /api/engine/run";
            curl --retry 3 --retry-delay 3 --max-time 20 -sS -X POST "${CMS_BASE%/}/api/engine/run?mode=external" \
              -H 'Content-Type: application/json' \
              --data "{\"url\":\"$SEED_URL\",\"maxItems\":0}" || true
          fi
          if [ "$BACKFILL" = "true" ]; then
            if echo "$URL" | grep -q "?"; then URL="$URL&backfill=true"; else URL="$URL?backfill=true"; fi
          fi
          # Optional: target a single sourceId from repository_dispatch payload
          if [ -n "$SOURCE_ID" ]; then
            if echo "$URL" | grep -q "?"; then URL="$URL&sourceId=$SOURCE_ID"; else URL="$URL?sourceId=$SOURCE_ID"; fi
          fi
          # Force external-runner mode
          if echo "$URL" | grep -q "?"; then URL="$URL&mode=external"; else URL="$URL?mode=external"; fi
          echo "POST $URL"
          http_code=$(curl --retry 3 --retry-delay 5 --max-time 25 --connect-timeout 10 -sS -o /tmp/resp.json -w "%{http_code}" -H "Authorization: Bearer $ENGINE_MONITOR_TOKEN" -X POST "$URL")
          echo "Response ($http_code):" && cat /tmp/resp.json || true
          if [ "$http_code" -ge 300 ]; then
            echo "Monitor returned HTTP $http_code"; exit 1; fi

      - name: Run pending runs (Python worker)
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          R2_ENDPOINT_URL: ${{ secrets.R2_ENDPOINT_URL }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET_NAME: ${{ secrets.R2_BUCKET_NAME }}
          R2_REGION: auto
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          COOKIES_JSON: ${{ secrets.COOKIES_JSON }}
          COOKIES_PATH: ${{ secrets.COOKIES_PATH }}
          JOB_CONCURRENCY: ${{ secrets.JOB_CONCURRENCY }}
          ITEM_CONCURRENCY: ${{ secrets.ITEM_CONCURRENCY }}
          CMS_URL: ${{ secrets.CMS_URL }}
          ENGINE_MONITOR_TOKEN: ${{ secrets.ENGINE_MONITOR_TOKEN }}
          WORKER_PARALLELISM: ${{ secrets.WORKER_PARALLELISM }}
        run: |
          cd apps/worker
          python scripts/run_pending_once.py

      - name: Notify Slack on failure
        if: failure()
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [ -n "$SLACK_WEBHOOK_URL" ]; then
            msg=":rotating_light: Monitor failed for $GITHUB_REPOSITORY@$GITHUB_REF â€” run $GITHUB_RUN_ID"
            payload=$(printf '{"text":"%s"}' "$msg")
            curl -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK_URL" || true
          else
            echo "SLACK_WEBHOOK_URL not set; skipping Slack notification"
          fi
